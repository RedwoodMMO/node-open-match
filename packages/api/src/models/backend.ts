/** Generate by swagger-axios-codegen */
/* eslint-disable */

import config from "config";
import { openmatchAssignTicketsRequest, openmatchAssignTicketsResponse, openmatchFetchMatchesRequest, openmatchReleaseAllTicketsRequest, openmatchReleaseAllTicketsResponse, openmatchReleaseTicketsRequest, openmatchReleaseTicketsResponse } from './common';
import { IRequestOptions, IRequestConfig, getConfigs, axios } from './serviceOptions';

const basePath = config.get<string>("open-match.backend.endpoint");

// customer definition
// empty

export class BackendServiceService {
  /**
 * FetchMatches triggers a MatchFunction with the specified MatchProfile and
returns a set of matches generated by the Match Making Function, and
accepted by the evaluator.
Tickets in matches returned by FetchMatches are moved from active to
pending, and will not be returned by query.
 */
  static backendServiceFetchMatches(
    params: {
      /**  */
      body: openmatchFetchMatchesRequest;
    } = {} as any,
    options: IRequestOptions = {}
  ): Promise<any> {
    return new Promise((resolve, reject) => {
      let url = basePath + '/v1/backendservice/matches:fetch';

      const configs: IRequestConfig = getConfigs('post', 'application/json', url, options);

      let data = params['body'];

      configs.data = data;

      axios(configs, resolve, reject);
    });
  }
  /**
   * AssignTickets overwrites the Assignment field of the input TicketIds.
   */
  static backendServiceAssignTickets(
    params: {
      /**  */
      body: openmatchAssignTicketsRequest;
    } = {} as any,
    options: IRequestOptions = {}
  ): Promise<openmatchAssignTicketsResponse> {
    return new Promise((resolve, reject) => {
      let url = basePath + '/v1/backendservice/tickets:assign';

      const configs: IRequestConfig = getConfigs('post', 'application/json', url, options);

      let data = params['body'];

      configs.data = data;

      axios(configs, resolve, reject);
    });
  }
  /**
 * ReleaseTickets moves tickets from the pending state, to the active state.
This enables them to be returned by query, and find different matches.
BETA FEATURE WARNING:  This call and the associated Request and Response
messages are not finalized and still subject to possible change or removal.
 */
  static backendServiceReleaseTickets(
    params: {
      /**  */
      body: openmatchReleaseTicketsRequest;
    } = {} as any,
    options: IRequestOptions = {}
  ): Promise<openmatchReleaseTicketsResponse> {
    return new Promise((resolve, reject) => {
      let url = basePath + '/v1/backendservice/tickets:release';

      const configs: IRequestConfig = getConfigs('post', 'application/json', url, options);

      let data = params['body'];

      configs.data = data;

      axios(configs, resolve, reject);
    });
  }
  /**
 * ReleaseAllTickets moves all tickets from the pending state, to the active
state. This enables them to be returned by query, and find different
matches.
BETA FEATURE WARNING:  This call and the associated Request and Response
messages are not finalized and still subject to possible change or removal.
 */
  static backendServiceReleaseAllTickets(
    params: {
      /**  */
      body: openmatchReleaseAllTicketsRequest;
    } = {} as any,
    options: IRequestOptions = {}
  ): Promise<openmatchReleaseAllTicketsResponse> {
    return new Promise((resolve, reject) => {
      let url = basePath + '/v1/backendservice/tickets:releaseall';

      const configs: IRequestConfig = getConfigs('post', 'application/json', url, options);

      let data = params['body'];

      configs.data = data;

      axios(configs, resolve, reject);
    });
  }
}
